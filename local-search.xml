<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>感觉自己又“阳”了</title>
    <link href="/2025/04/18/cold/"/>
    <url>/2025/04/18/cold/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="难受"><a href="#难受" class="headerlink" title="难受"></a>难受</h3><p> 不知道是心理原因还是身体因素，最近这段时间每到周五就坐不住，感觉浑身酸痛，难受。只想赶紧下班回家躺着，其他啥也不想干。加上办公室内这两天好几个同事发烧感冒，我就更想躺平了，这是不是又一波新冠病毒来袭？我可是才感冒两周刚好啊，真的是身心俱疲！  </p><p> 自从新冠阳过之后，我这喉咙真就没好过了，始终感觉有痰咳不出又咽不下去，症状时而轻些，时而重些，有时会难受到整夜睡不着觉。喉镜是真不想去做了，做了两次，想起就干呕。西药中药都吃过了，也没任何轻缓的效果(所以吃药到底有什么用?)。反而是经过疫情放开后这两年时间，我已经逐渐自适应了，无非每日多吐几次痰。还有这鼻子，一到变天的时候，就痒，要么流鼻涕，要么干燥的不行，鼻屎多，很不舒服。我觉得自己要么有鼻窦炎，要么是过敏性鼻炎。哎，再一次感慨，人活着有时真的是很痛苦，哪怕啥也不干呢。</p><h3 id="找寻解压的方式"><a href="#找寻解压的方式" class="headerlink" title="找寻解压的方式"></a>找寻解压的方式</h3><ol><li>听音乐<br> 音乐确实很解压，白天工作的时候戴上耳机，听到喜欢的旋律，心情也会愉悦不少，赶走焦躁。但是晚上睡前听音乐就会变得emo，充满负能量，很神奇。</li><li>跑步<br> 昨晚连续跑了4公里后，今天来上班膝盖外侧也是无比酸痛的，本来身上其他地方也酸痛！但是对于立志减肥的我来说，也确实需要坚持下去。马上就能突破160斤关卡了，从167斤一路掉秤下来，也不是做不到事情。跑步确实是减肥又减压，必须坚持！尤其天气也暖和起来了,更要坚持锻炼多跑!</li><li>电子游戏<br> 手机，平板上的游戏是反复的安装，卸载。玩吧，时间又不多，玩不够尽兴。不玩吧，有时实在是枯燥乏味，感觉只有电子游戏能拯救我自己。 前几天又把梦幻西游手游下载回来了，看着游戏中充值超过5位数的大佬们，我虽羡慕，但是也总能控制住自己的充值欲望，谁让自己现在是百万负债呢！哈哈！参与个老玩家回流活动，还能赚他几块钱，美哉！哪天不想玩了，再卸载了它。<strong>英雄联盟</strong>这玩意儿，感觉也是玩不动了，现在只感慨一句话，朋友是游戏最高的配置。</li></ol><h3 id="儿子的教育问题"><a href="#儿子的教育问题" class="headerlink" title="儿子的教育问题"></a>儿子的教育问题</h3><p>还有昨天儿子的期中考试成绩出来了，数学只考了70多分，之前还信心满满的吹嘘自己绝对能考到95以上！我真的是感受到了教育的难处，产生了自我怀疑，平时是不是对他真的太好了？虽然才上一年级吧，分数也不必看的过重，但人就是很难接受自己，哦现在是子女的，平凡与普通😂。平时他写作业本就拖沓，我还不忍心让他一直学习，总想着让他放松一下，给他看视频或出去玩的时间，想让他多开心些。看来以后也得加强学习管教了！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>心情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中美关税贸易战-之我见</title>
    <link href="/2025/04/10/trade-war/"/>
    <url>/2025/04/10/trade-war/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>— 截止到今天（2025年4月10日晚上），中方对美所谓加征对等关税的反制措施（对美所有商品加征84%关税）已经正式生效，且政策的细则非常详细，仿佛是提前早已准备一般。  </p><h3 id="特朗普为什么要加关税？"><a href="#特朗普为什么要加关税？" class="headerlink" title="特朗普为什么要加关税？"></a>特朗普为什么要加关税？</h3><p>本来在当今这个全球化的世界中，美国等发达国家通过高精尖的技术专利垄断以及金融手段等控制着产业的上游，而中国等发展中国家以低端制造业为主，大家分工协作，共同进步。但是，随着这些年中国经济的不断提升，已经到了世界第二的位置，美国感受到了威胁，且中国也确实不满足于低端制造，在2015年提出了《中国制造2025》战略，主旨是将中国由制造大国转变为制造强国，且已基本实现。近些年通过新能源汽车，人工智能等领域发力，希望占据经济新产业领域的头部。且不说两国政治，意识形态的矛盾，走到这一步，美国肯定是万万不想让中国强大起来的，他们原本干着最轻松的活儿，赚着最舒服的钱，眼看着好日子可能就要到头了，必须得围堵中国的发展，哪怕杀敌一千自损八百。  </p><p> 我本人是不喜欢特朗普的,带有偏见。印象中他第一次上台的时候就经常打嘴炮，言论中充满了各种谎言，极不靠谱。我不明白美国人为啥会选这样一个人第二次当总统。包括此次竞选时说的话，他可以让俄乌冲突24小时内结束，真是笑话。  </p><p>特朗普发动关税名义上说是要解决贸易逆差，让制造业回流美国，认为中国等国家赚走了美国的钱。但是一个基本事实是长期贸易逆差恰恰说明美国有钱，美国人花得起钱。也正是因为贸易逆差，美国可以通过美元长期称霸全球，让其他国家以美元货币来结算，而美元的价值，是美国自己说了算的，货币不过一张纸，其他国家的纸币国际社会又普遍不认可，只有美元的信誉高。</p><h3 id="过程以及影响"><a href="#过程以及影响" class="headerlink" title="过程以及影响"></a>过程以及影响</h3><p>特朗普先是提出在对中国所有出口商品20%关税的基础上，提高34%。中国政府毫不犹豫的的做出了反制，态度强硬。紧接着，双方都继续加码，在我看来这实际上已经没有意义了，50%多的关税与超过100%的关税差别不大，只是听起来显得更霸气些，但是商品的出口利润率肯定没有那么高，正常贸易肯定是做不成了。川普说他在等中国的电话，要求谈判的电话。但是他一直没有等来电话，而是等来了中国政府的孤注一掷。一来二去间，网友们都沸腾了，像要打仗一般高呼“一代人有一代人的上甘岭……”  ，股市也炸了，全球暴跌。但是4月9号晚上欧盟也宣布对美国的关税政策实施报复，加25%关税后，川普竟又马上说，因很多国家都在跪着求着他谈判，所以他又宣布对除中国外的没有反制国家给与90天暂停关税。本来世界经济即将陷入焦灼，大家都要比赛吃苦了，他这一操作，好像其他国家突然又回到正轨一样，这让人感到意料之外，又在情理之中。毕竟他的主要目标是中国。但他这么一耍，反应最强烈的还是股市，美国股市当晚暴涨20%，比着前几天国内自媒体们惊呼美股“2天暴跌10%”可是“暴”的更多啊！不禁让人怀疑，川普是不是在操纵股市，进行收割呢！</p><h3 id="困局-破局"><a href="#困局-破局" class="headerlink" title="困局 破局"></a>困局 破局</h3><p>外贸企业减少或没有订单了，工人就要降薪或被裁了。转而大家的消费就要更加缩减了，我感觉对于目前通缩的国内大环境来说，情况是恶略的。接下来就看政府如何解决产能过剩的问题以及如何调整产业结构了。如何把外贸转内需。 这几年不光是我自己，整个国内的大环境在房地产市场的萧条带领下都已经很艰难了。</p><h3 id="我能做什么"><a href="#我能做什么" class="headerlink" title="我能做什么?"></a>我能做什么?</h3><p>我觉得这时候，我应该相信国家一次，赌国运。毕竟中国人是很能吃苦的。中国的经济不会被打垮，这时候应该是抄底大A的好时候，他人恐慌我贪婪！说好听点叫为国护盘。毕竟，天塌不下来！</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>经济</tag>
      
      <tag>金融</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅学docker</title>
    <link href="/2025/03/29/about-docker/"/>
    <url>/2025/03/29/about-docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker 是一个开源的应用容器引擎，基于GO语言开发实现并遵从 Apache2.0 协议开源。  </p><p>Docker对进程进行封装隔离，属于操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其他的隔离的进程，因此也称其为容器。  </p><p>Docker在容器的基础上，进行了进一步的封装，从文件系统，网络互联到进程隔离等等，极大的简化了容器的创建和维护，使得Docker技术比虚拟机技术更为轻便，快捷。</p><h2 id="Mac安装docker"><a href="#Mac安装docker" class="headerlink" title="Mac安装docker"></a>Mac安装docker</h2><ol><li>官网下载<br><a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a><br>下载Docker Desktop Mac版<br>直接安装.dmg  </li><li>通过home brew 安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install --cask docker<br></code></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker --version<br>Docker version 28.0.1, build 068a01e<br><br></code></pre></td></tr></table></figure><p>尝试运行一个nginx服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ docker run -d -p 80:80 --name webserver nginx<br></code></pre></td></tr></table></figure><p>服务运行后，可以访问 <code>http://localhost</code>，如果看到 “Welcome to nginx!”，就说明 Docker Desktop for Mac 安装成功了。</p><p>如果不开代理的情况下，需要使用<strong>镜像加速器</strong>。国内很多平台提供镜像加速服务，有的不能使用了。 </p><h2 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h2><p>在任务栏点击 Docker Desktop 应用图标 -&gt; Settings…，在左侧导航菜单选择 Docker Engine，在右侧像下边一样编辑 json 文件。修改完成之后，点击 Apply &amp; restart 按钮，Docker 就会重启并应用配置的镜像地址了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://hub.atomgit.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>检查加速器是否生效<br>执行 $ docker info，如果从结果中看到了如下内容，说明配置成功。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts">Registry Mirrors:<br><span class="hljs-symbol"> https:</span><span class="hljs-comment">//hub.atomgit.com/</span><br></code></pre></td></tr></table></figure><h2 id="Docker包括三个基本概念"><a href="#Docker包括三个基本概念" class="headerlink" title="Docker包括三个基本概念"></a>Docker包括三个基本概念</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>Docker 镜像 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包含 任何动态数据，其内容在构建之后也不会被改变。</p><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。    </p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。   </p><p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="https://yeasy.gitbook.io/docker_practice/data_management/volume">数据卷（Volume）</a>、或者 <a href="https://yeasy.gitbook.io/docker_practice/data_management/bind-mounts">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。<br>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://yeasy.gitbook.io/docker_practice/repository/registry">Docker Registry</a> 就是这样的服务。  </p><p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><p>以 <a href="https://hub.docker.com/_/ubuntu">Ubuntu 镜像</a> 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:16.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p><p>仓库名经常以 两段式路径 形式出现，比如 jwilder&#x2F;nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。  </p><p>Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。</p><p>从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">$ docker pull <span class="hljs-comment">[选项]</span> <span class="hljs-comment">[Docker Registry 地址<span class="hljs-comment">[:端口号]</span>/]</span>仓库名<span class="hljs-comment">[:标签]</span><br></code></pre></td></tr></table></figure><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。<br><code>docker run</code> 就是运行容器的命令</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p> Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。  </p><p>Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><p>使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p>Compose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p><p>Docker Desktop for Mac&#x2F;Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。  </p><p>查看版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker-compose <span class="hljs-comment">--version</span><br>Docker Compose <span class="hljs-built_in">version</span> v2<span class="hljs-number">.33</span><span class="hljs-number">.1</span>-desktop<span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>运行 compose 项目</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker-compose up<br></code></pre></td></tr></table></figure><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。<br>Compose 的命令包括：</p><ul><li>up：创建并启动项目中的服务</li><li>start：启动项目中的服务</li><li>stop：停止项目中的服务</li><li>restart：重启项目中的服务</li><li>pause：暂停项目中的服务</li><li>unpause：恢复项目中的服务</li><li>rm：删除停止的项目</li><li>build：构建项目中的服务</li><li>logs：查看项目中的服务日志</li><li>port：查看项目中服务的端口映射</li><li>ps：列出项目中所有容器</li><li>top：显示各个服务容器的运行状态</li><li>exec：在运行的容器中执行命令</li><li>config：验证 Compose 文件</li></ul><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项:"></a>命令选项:</h3><ul><li>-f, –file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。  </li><li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。  </li><li>–verbose 输出更多调试信息。</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-078b23c0" role="button" aria-expanded="false" aria-controls="collapse-078b23c0">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-078b23c0">        <div class="fold-content">          <p><img src="https://cdn.yueyc.top/img/20250330002953486.jpeg"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇趣喵kr-081键盘说明书</title>
    <link href="/2025/03/23/keybord/"/>
    <url>/2025/03/23/keybord/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>键数81<br>电池：8000mAh<br>工作时间：4-6周<br>充电时间：4小时<br>模式：有线&#x2F;蓝牙&#x2F;2.4G<br>蓝牙名称： KR081 BT<br>Fn+1，Fn+2，Fn+3以连续配对最多三台设备<br>Fn+空格 关闭所有灯光<br>Fn+Enter 循环切换灯光<br><img src="https://cdn.yueyc.top/img/20250324213726000.jpg"></p><p><img src="https://cdn.yueyc.top/img/20250324213741821.jpg"></p><p><img src="https://cdn.yueyc.top/img/20250324213803181.jpg"></p><p><img src="https://cdn.yueyc.top/img/20250324213819553.jpg"><br><img src="https://cdn.yueyc.top/img/20250324213448176.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>键盘说明书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客配置图片防盗链,并配置CDN加速</title>
    <link href="/2025/03/17/blog-config/"/>
    <url>/2025/03/17/blog-config/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前在七牛云上申请了个存储空间，作为博客的图床使用。本来想着有10G的免费空间还有CDN免费加速的服务，怎么着都够用，毕竟我这小站也不推广，理论上没啥访问量。但周末七牛云竟然给我发了一条短信，说我欠费了，账号处于3天保护期，马上将被冻结，我瞬间就不淡定了，这才刚开始使用，就扣费了？<br><img src="https://cdn.yueyc.top/img/20250317215927244.jpeg"><br>不明白这2分钱到底是怎么得来的，本想问下七牛云客服，但翻了下官网，除了提交工单，没找到在线客服和电话号码。行吧，这样逼我，那我就冲10块玩玩。但是10块钱也是一笔巨款，与零氪的区别可太大了， 我可不能被别的玩家薅羊毛了，我得配置图片防盗链，保护自己的流量。🐶    </p><p>一通折腾，在此处设置了开启防盗链，发现根本不对劲，原来此处设置的是存储空间的防盗链，根本不是我要的东西。<br><img src="https://cdn.yueyc.top/img/20250317220852659.png"><br><strong>正确步骤：</strong><br><img src="https://cdn.yueyc.top/img/20250317224617440.png"><br><img src="https://cdn.yueyc.top/img/20250317224752357.png"><br><img src="https://cdn.yueyc.top/img/20250317224843089.png"></p><p>在此处开启。<br><img src="https://cdn.yueyc.top/img/20250317224819207.png"><br>开启后具体是否生效，用之前访问过的浏览器是无法判定的，因为有缓存，即使已经设置了防盗链和白名单，但是经我不断测试，在有缓存的情况下用其他站点还是能访问到图片资源。因此，最好的做法是换一台浏览器或设备，重新访问。  </p><p>那么换了设备访问后，虽然防盗链是生效了，但新的问题出现了。。因为博客是部署在github pages上的，在不开代理的情况下，访问速度巨慢无比，加载了半天竟然还是转圈圈。这怎么能忍，必须得解决。  </p><p>然后，我就看到了Cloudflare<br>关于 Cloudflare 的介绍，可以简单让AI（豆包）介绍：<br><img src="https://cdn.yueyc.top/img/20250317225052104.png"><br><img src="https://cdn.yueyc.top/img/20250317225115800.png"></p><p>Cloudflare 是有免费版和付费版的，付费版可以开启更多的功能，但是对我的博客来说,免费版足够使用。最主要的是，无需担心流量被盗刷，因为 Cloudflare 自带的 DDoS 防护功能，可以自动识别攻击流量并进行封禁。  </p><p>这个 Cloudflare 使用起来真的是方便快捷，可以直接将github上的站点仓库导入进来，一键部署。<br><img src="https://cdn.yueyc.top/img/20250317225224384.png"></p><p>项目创建完成后，即可从分配的新域名访问博客，测试了下，CDN的加速效果还是很明显的。<br>Cloudflare 还提供免费的 SSL 证书，可以让博客无需再做 HTTPS 证书的配置。  </p><p>接下来在 Cloudflare 上配置自己的域名<br><img src="https://cdn.yueyc.top/img/20250317225332225.png"><br>可以通过CNAME的方式去华为云（域名提供商）平台添加一条 DNS 解析记录，之前已经添加过多次，轻车熟路。  </p><p>最后，就能使用自己的域名快速打开博客了！😊</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-1dcdedba" role="button" aria-expanded="false" aria-controls="collapse-1dcdedba">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-1dcdedba">        <div class="fold-content">          <p><img src="https://cdn.yueyc.top/img/20250317225446530.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学会 Node.js 就真的全栈了吗？</title>
    <link href="/2025/03/13/idea/"/>
    <url>/2025/03/13/idea/</url>
    
    <content type="html"><![CDATA[<ul><li>今天看到<a href="https://web.qianguyihao.com/11-Node.js/01-Node.js%E4%BB%8B%E7%BB%8D.html#%E6%9C%80%E5%90%8E%E4%B8%80%E6%AE%B5-%E5%89%8D%E7%AB%AF%E5%90%8C%E5%AD%A6%E4%BC%9A-node-js-%E5%B0%B1%E7%9C%9F%E7%9A%84%E5%85%A8%E6%A0%88%E4%BA%86%E5%90%97">这段话</a>，感触颇深。</li><li>你可以在这一段时间里擅长前端技术，也可以在另一段时间擅长后台技术，但你不可能在同一段时间同时擅长前端和后台，更不可能所有的时间同时擅长两者。</li><li>所谓的全栈，只是一个伪命题，个人不一定需要全栈，企业和项目也不强制要求全栈，分工协作，才最高效。</li><li>全栈只是一种职业生涯的标签，并不是真正意义上的全栈。</li><li>对于个人而言，虽然全栈很难，但是Node.js的出现，让JS语言实现了前后端语法的统一，让JS语言的技术栈更加全面。</li><li>涉及到后台开发相关的技术，无论如何，也绕不开框架设计、开发调试、数据库操作、高并发处理、大规模存储、性能优化、容灾方案、RPC调用、进程管理、操作系统调度、网络安全、系统运维、日常维护，甚至是Linux内核、驱动开发等过硬的知识技能和经验积累。等你亲身经历过这些，才算明白：语言只是一种工具。</li></ul><hr><h3 id="Node-js的特点"><a href="#Node-js的特点" class="headerlink" title="Node.js的特点"></a>Node.js的特点</h3><ul><li>异步,非阻塞IO模型</li><li>事件循环</li><li>单线程</li><li>轻量级</li><li>高性能</li><li>跨平台</li></ul><p>NPM包的版本号，是用三位数表示。版本号前面的符号，代表开发者想要更新的的最新版本条件：</p><ul><li>符号^：固定第一位数。表示主版本固定的情况下，可更新至最新版。例如 vue: “^2.6.0” 表示 2.6.0及其以上的2.x.x 都是满足的。</li><li>符号~：固定前两位数。表示次版本固定的情况下，可更新至最新版。例如 vuex: “~2.6.0”，2.6.0及其以上的2.6.x都是满足的。</li><li>无符号：三位数都固定。无符号表示固定版本号。例如 vue: “2.6.0”，此时一定是安装2.6.0版本。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ssh">ylsoft@ylsoftdeMac-mini-2 ~ % node -v<br>v20.13.1<br>ylsoft@ylsoftdeMac-mini-2 ~ % npm -v <br>10.5.2<br>ylsoft@ylsoftdeMac-mini-2 ~ % <br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-97b8d977" role="button" aria-expanded="false" aria-controls="collapse-97b8d977">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-97b8d977">        <div class="fold-content">          <p><img src="https://cdn.yueyc.top/img/20250313141011816.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>mark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>要练习说话,表达</title>
    <link href="/2025/03/12/learn-speech/"/>
    <url>/2025/03/12/learn-speech/</url>
    
    <content type="html"><![CDATA[<p>最近公司部门搞晨会分享，轮到我分享内容的时候，我自己还是会感到紧张，语言总是组织不起来，讲话磕磕巴巴、语无伦次。  </p><p>我觉得我是那种与人正常对话交流还好，但是让我一个人独自发言，无论什么场合，人多人少，我总会遇到脑子一片空白的景象，不知道说什么好。我自认为我是一个逻辑思维能力还算不错的人，但是干程序员这么长时间了，大部分时间都是独自面对电脑，很少面对真实的人、观众，所以我的说话表达能力应该是退缩了。  </p><p>前几天还买了周鸿祎的一本书《想赢就要敢上场》，本来是抱着提升认知、提升公开表达能力的意图去读，但说实话，我觉得这本书没啥营养价值。好多凑数的页码，简短的内容除了空白页和 slogan 页之外，干货不多。读完了并没有让我产生多少思想的碰撞，还没有在抖音上看老周他自己发的短视频收获多。  </p><p>人应该是需要向上社交的，所以我必须要提升自己的表达能力，强迫自己读书，多说话，多交流。  </p><p>但是该利用什么办法呢？搞视频自媒体，我是没有勇气的。😄  </p><p>复盘了一下自己，这些年日常的交际时间确实在逐渐下降，大多数时间里都是在家呆着，除了与家人短暂的必要沟通之外，我没有主动与其他人交流过。前些年爱看的综艺节目类也都没看了，除了上班，业余时间基本就打单机游戏与刷短视频中度过了。除了体重在增长，其他方面貌似都在下降。  </p><p>我想，说话表达能力应该跟运动一样，要不断的训练，主动与人沟通，收集生活中的谈资，像跑步一样形成肌肉记忆。突然想到老周书里说的，多储备一些笑话，到需要演讲的场合时，总会派上用场的。无论如何，我都该练习说话、表达了。  </p><ul><li>每周都抽出时间给儿子阅读；</li><li>每次当众讲话前，先有所准备，梳理好语言逻辑，克服紧张；</li><li>多与朋友交流，了解他人观点，提升自己。</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-a076df15" role="button" aria-expanded="false" aria-controls="collapse-a076df15">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-a076df15">        <div class="fold-content">          <p><img src="https://cdn.yueyc.top/img/20250313140145890.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的offset,client,scroll系列相关属性</title>
    <link href="/2025/03/05/learnJS2/"/>
    <url>/2025/03/05/learnJS2/</url>
    
    <content type="html"><![CDATA[<h3 id="offset系列相关属性"><a href="#offset系列相关属性" class="headerlink" title="offset系列相关属性"></a>offset系列相关属性</h3><ul><li>offsetParent</li><li>offsetLeft</li><li>offsetTop</li><li>offsetWidth</li><li>offsetHeight</li></ul><p>offset指偏移量，offset系列属性都是相对于父级元素的,可动态获取元素位置。<br><code>offsetParent</code>是一个对象，是当前元素的父级元素。如果父级元素没有css定位，则为<code>body</code>。<br>如果父级元素有css定位(position为absolute&#x2F;relative&#x2F;fixed)，则为最近的有定位的父级元素。  </p><p><code>offsetleft</code>指当前元素距离父级元素的左偏移量。<br><code>offsetLeft</code>指当前元素距离父级元素的上偏移量。<br><code>offsetWidth</code>指当前元素的宽度。包括自身 padding,border。<br><code>offsetHeight</code>指当前元素的高度。包括自身 padding,border。<br>offset系列获得的数值是没有单位的,且为只读属性，不能赋值。<br>对比<code>style.width</code>获得的是带单位(px)的字符串,<code>style.width</code>是可读写属性,不包含padding和border。<br>用offset属性获取值,用style设置值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;100px&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="案例-计算鼠标在盒子内的坐标"><a href="#案例-计算鼠标在盒子内的坐标" class="headerlink" title="案例 计算鼠标在盒子内的坐标"></a>案例 计算鼠标在盒子内的坐标</h3><p><img src="https://cdn.yueyc.top/img/offsetTop.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 我们在盒子内点击， 想要得到鼠标距离盒子左右的距离。</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 首先得到鼠标在页面中的坐标（ e.pageX, e.pageY）</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 其次得到盒子在页面中的距离(box.offsetLeft, box.offsetTop)</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 用鼠标距离页面的坐标减去盒子在页面中的距离， 得到 鼠标在盒子内的坐标</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><br><span class="language-javascript">    box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// console.log(e.pageX);</span></span><br><span class="language-javascript">      <span class="hljs-comment">// console.log(e.pageY);</span></span><br><span class="language-javascript">      <span class="hljs-comment">// console.log(box.offsetLeft);</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> x = e.<span class="hljs-property">pageX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetLeft</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> y = e.<span class="hljs-property">pageY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetTop</span>;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;x坐标是&#x27;</span> + x + <span class="hljs-string">&#x27; y坐标是&#x27;</span> + y;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="client系列相关属性"><a href="#client系列相关属性" class="headerlink" title="client系列相关属性"></a>client系列相关属性</h3><ul><li>clientLeft</li><li>clientTop</li><li>clientWidth</li><li>clientHeight</li></ul><p>client指的是元素本身的可视内容,不包括边框和滚动条。<br><code>clientLeft</code>指当前元素的左边框宽度。<br><code>clientTop</code>指当前元素的上边框宽度。<br><code>clientWidth</code>指当前元素的可视宽度,包括自身padding,不含边框。<br><code>clientHeight</code>指当前元素的可视高度,包括自身padding,不含边框。<br>client系列获取的内容也不含单位。</p><h4 id="clientWidth-clientHeight与offsetWidth-offsetHeight都是只读属性-区别"><a href="#clientWidth-clientHeight与offsetWidth-offsetHeight都是只读属性-区别" class="headerlink" title="clientWidth,clientHeight与offsetWidth,offsetHeight都是只读属性,区别:"></a><code>clientWidth</code>,<code>clientHeight</code>与<code>offsetWidth</code>,<code>offsetHeight</code>都是只读属性,区别:</h4><p><code>clientWidth</code>,<code>clientHeight</code>获取的宽高为padding + 内容区<br><code>offsetWidth</code>,<code>offsetHeight</code>获取的宽高为padding + 内容区 + <strong>边框</strong></p><h3 id="scroll系列相关属性"><a href="#scroll系列相关属性" class="headerlink" title="scroll系列相关属性"></a>scroll系列相关属性</h3><ul><li>scrollLeft</li><li>scrollTop</li><li>scrollWidth</li><li>scrollHeight</li></ul><p>当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法。<br><code>scrollLeft</code>获取水平滚动条滚动的距离。<br><code>scrollTop</code>获取垂直滚动条滚动的距离。<br><code>scrollWidth</code>指当前滚动元素的实际宽度,包括 padding,不含 border。<br><code>scrollHeight</code>指当前滚动元素实际高度,包括 padding,不含 border。</p><p>当某个元素满足<code>scrollHeight - scrollTop == clientHeight</code>时，说明垂直滚动条滚动到底了。<br>当某个元素满足<code>scrollWidth - scrollLeft == clientWidth</code>时，说明水平滚动条滚动到底了。</p><h3 id="相关联"><a href="#相关联" class="headerlink" title="相关联"></a>相关联</h3><ul><li><code>window.onscroll</code> 屏幕滚动</li><li><code>window.onresize</code> 屏幕窗口尺寸改变</li><li><code>window.onload</code> 页面加载完毕<br>屏幕分辨率:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span> + <span class="hljs-string">&quot;    &quot;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span>;<br>&#125;<br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-4101fe7f" role="button" aria-expanded="false" aria-controls="collapse-4101fe7f">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-4101fe7f">        <div class="fold-content">          <p><img src="/img/learnJS.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gradle与AGP的关系</title>
    <link href="/2025/03/03/gradle/"/>
    <url>/2025/03/03/gradle/</url>
    
    <content type="html"><![CDATA[<h3 id="flutter旧项目升级Gradle版本"><a href="#flutter旧项目升级Gradle版本" class="headerlink" title="flutter旧项目升级Gradle版本"></a>flutter旧项目升级Gradle版本</h3><p>今天运行一个flutter旧版本(2.8.1)项目,报错跑不起来:<br><code>exception in phase ‘semantic analysis‘ in source unit ‘_BuildScript_‘ Unsupported class file major version 61</code>  </p><p><img src="https://cdn.yueyc.top/img/20250303184653437.png"></p><p>意思是说,开发工具的java版本太高了,而项目配置的Gradle版本(这里是6.7)不支持这个Java版本.<br>查看本机配置的java版本:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openjdk</span> version <span class="hljs-string">&quot;17.0.10&quot;</span> <span class="hljs-number">2024</span>-<span class="hljs-number">01</span>-<span class="hljs-number">16</span><br><span class="hljs-attribute">OpenJDK</span> Runtime Environment (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">0</span>-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>b1087.<span class="hljs-number">21</span>-<span class="hljs-number">11572160</span>)<br><span class="hljs-attribute">OpenJDK</span> <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>+<span class="hljs-number">0</span>-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span>b1087.<span class="hljs-number">21</span>-<span class="hljs-number">11572160</span>, mixed mode)<br></code></pre></td></tr></table></figure><p>发现Java版本是17,而Gradle6.7要求Java版本是11以下,所以要么<strong>Gradle版本升级</strong>,要么<strong>降低Java版本</strong>到11.<br>这里选择升级Gradle版本到7.3.3,在android&#x2F;gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties文件中找到distributionUrl这一行，修改:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">distributionUrl</span>=https\://services.gradle.org/distributions/gradle-<span class="hljs-number">7</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>-<span class="hljs-literal">all</span>.zip<br></code></pre></td></tr></table></figure><p>同时修改在android&#x2F;build.gradle文件中的gradleVersion为7.2.0:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    ext.kotlin_version = <span class="hljs-string">&#x27;1.5.31&#x27;</span><br>    <span class="hljs-keyword">repositories</span> &#123;<br>        google()<br>        jcenter()<br>    &#125;<br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        <span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.android.tools.build:gradle:7.2.0&#x27;</span><br>        <span class="hljs-keyword">classpath</span> <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>注意两者路径不要搞混:  </p><ul><li>Gradle配置路径:<strong>android&#x2F;gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties</strong>  </li><li>Gradle插件配置路径:<strong>android&#x2F;build.gradle</strong></li></ul><hr><p>修改完之后:<br><img src="https://cdn.yueyc.top/img/20250303173408361.png">  </p><p>运行,新的报错:<code>The option &#39;android.jetifier.blacklist&#39; is deprecated.   </code>  </p><p><img src="https://cdn.yueyc.top/img/20250303173531697.png">  </p><p>解决办法:<br><img src="https://cdn.yueyc.top/img/20250303173725271.png"><br>最后,修改compileSdkVersion和targetSdkVersion版本为<strong>32</strong></p><h3 id="compileSdkVersion和targetSdkVersion区别"><a href="#compileSdkVersion和targetSdkVersion区别" class="headerlink" title="compileSdkVersion和targetSdkVersion区别:"></a>compileSdkVersion和targetSdkVersion区别:</h3><ul><li>compileSdkVersion:编译SDK版本,编译时使用的SDK版本,一般情况下,编译时使用的SDK版本应当和targetSdkVersion保持一致.</li><li>targetSdkVersion:目标SDK版本,运行时使用的SDK版本,一般情况下,应当选择最新的SDK版本,以获得最新的特性和安全更新.</li></ul><h3 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle?"></a>什么是Gradle?</h3><p>Gradle是一个自动化构建工具，它可以自动执行各种任务，例如编译，测试，打包，发布，依赖管理等。Gradle基于Groovy语言，支持多种语言，包括Java，Groovy，Kotlin，Scala等。  </p><p>在使用 Gradle 时，通常需要使用 Java Development Kit (JDK) 来编译、运行和测试你的项目。  </p><h3 id="什么是Android-Gradle-Plugin-AGP"><a href="#什么是Android-Gradle-Plugin-AGP" class="headerlink" title="什么是Android Gradle Plugin (AGP)?"></a>什么是Android Gradle Plugin (AGP)?</h3><p>Android Gradle Plugin (AGP) 是 Gradle 的一部分，它是 Android 项目的构建系统，负责编译，打包，测试，签名和发布 Android 应用。AGP 基于 Gradle，并提供一系列插件来支持 Android 开发。  </p><p>不做安卓原生开发,不了解这些配置的对应关系,通过搜索,查看官网(<a href="https://developer.android.com/build/releases/gradle-plugin?hl=zh-cn">https://developer.android.com/build/releases/gradle-plugin?hl=zh-cn</a>),找到如下对应关系:</p><table><thead><tr><th>插件版本</th><th>所需最低Gradle版本</th></tr></thead><tbody><tr><td>8.8</td><td>8.10.2</td></tr><tr><td>8.7</td><td>8.9</td></tr><tr><td>8.6</td><td>8.7</td></tr><tr><td>8.5</td><td>8.7</td></tr><tr><td>8.4</td><td>8.6</td></tr><tr><td>8.3</td><td>8.4</td></tr><tr><td>8.2</td><td>8.2</td></tr><tr><td>8.1</td><td>8.0</td></tr><tr><td>8.0</td><td>8.0</td></tr><tr><td>7.4</td><td>7.5</td></tr><tr><td>7.3</td><td>7.4</td></tr><tr><td>7.2</td><td>7.3.3</td></tr><tr><td>7.1</td><td>7.2</td></tr><tr><td>7.0</td><td>7.0</td></tr><tr><td>4.2.0+</td><td>6.7.1</td></tr><tr><td>4.1.0+</td><td>6.5+</td></tr><tr><td>4.0.0+</td><td>6.1.1+</td></tr><tr><td>3.6.0 - 3.6.4</td><td>5.6.4+</td></tr><tr><td>3.5.0 - 3.5.4</td><td>5.4.1+</td></tr><tr><td>3.4.0 - 3.4.3</td><td>5.1.1+</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="Android-Gradle-插件和-Android-Studio-兼容性"><a href="#Android-Gradle-插件和-Android-Studio-兼容性" class="headerlink" title="Android Gradle 插件和 Android Studio 兼容性"></a>Android Gradle 插件和 Android Studio 兼容性</h3><p>Android Studio 构建系统以 Gradle 为基础，并且 Android Gradle 插件 (AGP) 添加了几项专用于构建 Android 应用的功能。下表列出了各个 Android Studio 版本所需的 AGP 版本。</p><table><thead><tr><th>Android Studio 版本</th><th>所需的 AGP 版本</th></tr></thead><tbody><tr><td>Ladybug 功能更新 | 2024.2.2</td><td>3.2-8.8</td></tr><tr><td>Ladybug | 2024.2.1</td><td>3.2-8.7</td></tr><tr><td>Koala 功能更新 | 2024.1.2</td><td>3.2-8.6</td></tr><tr><td>Koala | 2024.1.1</td><td>3.2-8.5</td></tr><tr><td>Jellyfish | 2023.3.1</td><td>3.2-8.4</td></tr><tr><td>Iguana | 2023.2.1</td><td>3.2-8.3</td></tr><tr><td>Hedgehog | 2023.1.1</td><td>3.2-8.2</td></tr><tr><td>Giraffe | 2022.3.1</td><td>3.2-8.1</td></tr><tr><td>Flamingo | 2022.2.1</td><td>3.2-8.0</td></tr></tbody></table><h3 id="特定-Android-API-级别所要求的最低工具版本"><a href="#特定-Android-API-级别所要求的最低工具版本" class="headerlink" title="特定 Android API 级别所要求的最低工具版本"></a>特定 Android API 级别所要求的最低工具版本</h3><p>Android Studio 和 AGP 需要满足最低版本要求才能支持特定 API 级别。</p><table><thead><tr><th>API 级别</th><th>最低 Android Studio 版本</th><th>最低 AGP 版本</th></tr></thead><tbody><tr><td>Baklava 预览</td><td>Meerkat | 2024.3.1</td><td>8.9.0</td></tr><tr><td>35</td><td>Koala 功能更新 | 2024.2.1</td><td>8.6.0</td></tr><tr><td>34</td><td>Hedgehog | 2023.1.1</td><td>8.1.1</td></tr><tr><td>33</td><td>Flamingo | 2022.2.1</td><td>7.2</td></tr></tbody></table><h3 id="JDK版本与gradle版本对应关系"><a href="#JDK版本与gradle版本对应关系" class="headerlink" title="JDK版本与gradle版本对应关系"></a>JDK版本与gradle版本对应关系</h3><table><thead><tr><th>Java版本</th><th>第一个支持的Gradle版本</th></tr></thead><tbody><tr><td>18</td><td>7.5</td></tr><tr><td>17</td><td>7.3</td></tr><tr><td>16</td><td>7.0</td></tr><tr><td>15</td><td>6.7</td></tr><tr><td>14</td><td>6.3</td></tr><tr><td>13</td><td>6.0</td></tr><tr><td>12</td><td>5.4</td></tr><tr><td>11</td><td>5.0</td></tr><tr><td>10</td><td>4.7</td></tr><tr><td>9</td><td>4.3</td></tr><tr><td>8</td><td>2.1</td></tr></tbody></table>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-4d32595a" role="button" aria-expanded="false" aria-controls="collapse-4d32595a">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-4d32595a">        <div class="fold-content">          <p><img src="https://cdn.yueyc.top/img/20250303174155656.png"></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Android环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Gradle</tag>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电费水费燃气费暖气费物业费</title>
    <link href="/2025/03/01/price/"/>
    <url>/2025/03/01/price/</url>
    
    <content type="html"><![CDATA[<h3 id="居民电费"><a href="#居民电费" class="headerlink" title="居民电费"></a>居民电费</h3><table><thead><tr><th>阶梯</th><th>区间</th><th>价格</th></tr></thead><tbody><tr><td>第一档</td><td>每户每月用电180度以下</td><td>0.56元&#x2F;度</td></tr><tr><td>第二档</td><td>每户每月用电180～260度,电价提高0.05元&#x2F;度</td><td>0.61元&#x2F;度</td></tr><tr><td>第三档</td><td>每户每月用电260度以上,电价提高0.30元&#x2F;度</td><td>0.86元&#x2F;度</td></tr></tbody></table><hr><h3 id="居民生活用水水费"><a href="#居民生活用水水费" class="headerlink" title="居民生活用水水费"></a>居民生活用水水费</h3><table><thead><tr><th>阶梯</th><th>区间</th><th>价格</th></tr></thead><tbody><tr><td>第一档</td><td>年用水量在180立方米及以下</td><td>4.4元&#x2F;立方米</td></tr><tr><td>第二档</td><td>年用水量在181至260立方米之间</td><td>5.95元‌&#x2F;立方米</td></tr><tr><td>第三档</td><td>年用水量超过260立方米</td><td>10.6元‌&#x2F;立方米</td></tr></tbody></table><hr><h3 id="居民管道天然气费"><a href="#居民管道天然气费" class="headerlink" title="居民管道天然气费"></a>居民管道天然气费</h3><table><thead><tr><th>阶梯</th><th>区间</th><th>价格</th></tr></thead><tbody><tr><td>第一档</td><td>每户每月用气量50立方米及以下</td><td>2.94元&#x2F;立方米</td></tr><tr><td>第二档</td><td>每户每月用气量50立方米以上</td><td>3.82元&#x2F;立方米</td></tr></tbody></table><hr><h3 id="暖气费"><a href="#暖气费" class="headerlink" title="暖气费"></a>暖气费</h3><p>按照套内面积 0.19元&#x2F;㎡•日,先缴费后供暖.<br>采暖季通常为:11月15日至3月15日4个月.<br>举例:套内面积72㎡,当年采暖季共120天,总共采暖费用为:<br>0.19 * 72 * 120 &#x3D; 1641.6元</p><hr><h3 id="物业费"><a href="#物业费" class="headerlink" title="物业费"></a>物业费</h3><p>按照建筑面积,2.98元&#x2F;平 每月.<br>举例:建筑面积97平,当年物业费为:<br>2.98 * 97 * 12 &#x3D; 3468.72元</p><hr>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-f91001fb" role="button" aria-expanded="false" aria-controls="collapse-f91001fb">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-f91001fb">        <div class="fold-content">          <p><img src="/img/street.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础知识学习笔记</title>
    <link href="/2025/02/27/learnJS/"/>
    <url>/2025/02/27/learnJS/</url>
    
    <content type="html"><![CDATA[<h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><p><code>javascript</code>，<code>php</code>，<code>python</code>  </p><p>JS诞生于1995年，网景公司员工布兰登·艾奇发明，最初叫livescript，为了曾java热度，改名为javascript。</p><p>Js是世界上使用的最多的<strong>脚本语言</strong>,特点:<strong>单线程</strong></p><p>2011年 node.js诞生，使js能开发服务器端程序。  </p><h3 id="javascript的组成"><a href="#javascript的组成" class="headerlink" title="javascript的组成"></a>javascript的组成</h3><ol><li>ECMAScript js的语法标准，包括变量，表达式，运算符，函数，if，for语句</li><li>DOM document object model 文档对象模型，JS操作页面元素的api</li><li>BOM 浏览器对象模型</li></ol><p>ECMAScript不是一门语言，而是一个标准。规定了JS的编程语法和基础核心知识，所有浏览器厂商需要共同遵守的一套js语法工业标准。  </p><p>2015年发布了ECMAScript6版本。语言能力更强，包含很多新特性，但要考虑浏览器的兼容性问题。  </p><p>浏览器默认从上至下解析网页，我们将js代码写在body标签内，而不是head标签中，因为这样的js是无效的，标签元素在此时还没来得及加载，自然也无法操作元素。  </p><p>JS严格区分大小写。  </p><p>常量 <code>const</code><br>变量 <code>let</code><br>ES6之前 变量叫var，弱类型语言<br><code>静态数据</code>：以文件的形式存储在硬盘上，比如文档，照片，视频等，永久性数据<br><code>动态数据</code>： 内存中的数据，访问速度快</p><h3 id="JS有8种数据类型"><a href="#JS有8种数据类型" class="headerlink" title="JS有8种数据类型"></a>JS有8种数据类型</h3><p>基本数据类型 <code>String</code>，<code>Number</code>,<code>Biging</code>,<code>Boolean</code>,<code>Null</code>,<code>undefined</code>,<code>Symbol</code><br>引用数据类型 <code>Object</code><br>内置对象 <code>Function</code>，<code>Array</code>，<code>Date</code>，<code>Regexp</code>，<code>Error</code>等都属于<code>Object</code>类型  </p><p>数据类型之间最大的区别：<br>基本数据类型，参数赋值的时候传数值<br>引用数据类型，参数赋值的时候传地址</p><p>比较字符串大小时，是一位一位进行比较，顺序从左到右。如果一样大，则比较下一位。<br>“56”  &gt; “123”<br>因此，比较两个字符串数字时，要先转换类型</p><p><code>==</code>符号会做隐士转换，将不同类型的数据类型，先转为相同类型再比较。<br><code>===</code>不仅判断值相等，还要判断类型相同</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>形参与实参的个数可以不同，调用函数时，解析器不糊检查实参的数量。  </li><li>如果实参个数&gt;形参个数，则末尾的实参是多余的，不会被赋值，因为没有形参接收。   </li><li>如果实参个数&lt;形参个数，则末尾的形参是多余的，值是undefined  </li><li>函数中不写return，也会返回undefined</li><li>如果一个函数作为一个对象的属性保存，那么这个函数称为这个对象的方法。</li><li>函数内的arguments是一个类数组对象，里面存储了接收到的实参列表。</li></ul><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p> 一个函数内部调用这个函数自身。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局作用域是直接编写在script标签中的js代码，在页面打开时创建，在页面关闭时销毁。<br>全局作用域中有一个全局的<code>window</code>对象，他代表浏览器窗户，由浏览器创建，我们可以直接使用。<br>创建的变量都会作为window的对象属性保存。比如在全局作用域写  const a &#x3D; 100； 这里的a等价于<code>window.a</code>;<br>创建的函数会作为window对象方法保存。</p><h3 id="作用域的关系"><a href="#作用域的关系" class="headerlink" title="作用域的关系"></a>作用域的关系</h3><p>内部作用域可以访问外部作用域变量，外部不能访问内部。<br>无论是在函数内，还是函数外，如果变量未经声明就赋值（意思是不加 var、let，const），这个变量是全局变量。<br>任何变量，如果未经声明就赋值，此变量是属于window的属性。<br>函数内部可以访问全局变量和局部变量<br>函数外部只能访问全局变量<br>当函数执行完毕后，本作用域的的局部变量会销毁。</p><h3 id="闭包的表现形式"><a href="#闭包的表现形式" class="headerlink" title="闭包的表现形式"></a>闭包的表现形式</h3><ol><li>将一个函数作为另一个函数的返回值；</li><li>将函数作为实参传递给另一个函数调用</li></ol><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ol><li>延长局部变量的声明周期。</li><li>让函数外部可以操作函数内部的数据</li></ol>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-4101fe7f" role="button" aria-expanded="false" aria-controls="collapse-4101fe7f">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-4101fe7f">        <div class="fold-content">          <p><img src="/img/learnJS.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客---懂人情，知冷暖。</title>
    <link href="/2025/02/27/first-blog/"/>
    <url>/2025/02/27/first-blog/</url>
    
    <content type="html"><![CDATA[<p>转眼人生已过32载，马上步入中年了，诚惶诚恐。过去这一年多来，家中发生了很多变故，内心从未如此焦虑。  </p><p>或许一切都是因买房而起吧，一套不足百平米的房子，给我的家庭带来了巨额的债务，近几年的生活都过的紧巴巴的。而今面临经济大环境的寒气，公司的业绩也持续下滑，面临裁员降薪的风险。而我在此刻，还背负着为我的岳父以我的名义贷了近一百万的贷款，我不知道一个普通人在如此境况下该有怎样的心境,而他，还赔的精光。如此，该怎样去面对，如何去承受？我不知道!我只能对自己说，面对吧，总有人你比更惨，除了正常渡过每一天，我还能怎样呢？  </p><div class="note note-info">            <p><strong>——淡然处之</strong>。    </p>          </div><p>失眠，至少在30岁之前我的人生词典根本就不存在。现在经常彻夜难眠。每天睁开眼睛，想的就是怎样赚钱，怎样搞副业，怎样暴富。作为一个从业10年的程序员，我的性格又是那么谨小慎微，没有冒风险的精神。压抑的很！甚至开始反思，婚姻给我带来了什么。以前常有朋友调侃:”人生赢家啊,有车有房有老婆孩子!” 到现在我深深的体会到,拥有这些东西的背后,是多么沉重的责任，到今天都已经压得我快要窒息。今年春节期间，对未婚的朋友说，我真羡慕你未婚。他不理解我羡慕他什么。他比我年纪还大一岁，肯定也很焦虑，但我们的焦虑无法共鸣。我不想把焦虑的情绪带给家人，朋友。越是经历情绪的低谷，越是<strong>懂人情，知冷暖</strong>。我想给身边人展示一个积极乐观的自我，奋斗向上的自我😄。  </p><p>回头望，全是负能量。  </p><p>最近互联网上流传一句话——“债务不是手段，而是目的。”是的，这个社会机器滚滚向前，为了不让我躺平，给我设置了巨额的债务关卡。但我要改变自己，想办法去突破，提升自己！ </p><p><strong>我不知道写这个博客是否有人会看。我打算把日常一些所见所感记录下来，也规划一下自己，只当是给自己的碎片记录整理，或者心灵的倾诉吧！</strong>  </p><h2 id="这开篇，就先给自己立下3个flag"><a href="#这开篇，就先给自己立下3个flag" class="headerlink" title="这开篇，就先给自己立下3个flag:"></a>这开篇，就先给自己立下3个flag:</h2><div class="note note-info">            <p><strong>1. 减肥到155斤；</strong>  </p><p><strong>2. 掌握JS以及相关领域的常用框架；</strong>  </p><p><strong>3. 年底不要被迫卖房。</strong></p>          </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9d96e2bb" role="button" aria-expanded="false" aria-controls="collapse-9d96e2bb">        <div class="fold-arrow">▶</div>文章封面      </div>      <div class="fold-collapse collapse" id="collapse-9d96e2bb">        <div class="fold-content">          <p><img src="/img/first.png"></p>        </div>      </div>    </div>]]></content>
    
    
    
    <tags>
      
      <tag>心情</tag>
      
      <tag>flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
